// Plugins
plugins {
    id 'jacoco'
    id "com.github.kt3k.coveralls" version "2.8.2"
    id "me.champeau.gradle.jmh" version "0.4.4"
    id "org.sonarqube" version "2.7"
}

def publishedProjects = subprojects.findAll { it.path != ':test' }
def jacocoExclusions = [
        '.*com/annimon/stream/internal/Compat.*',
        '**/com/annimon/stream/internal/Compat**',
        '.*com/annimon/stream/test/hamcrest/CommonMatcher.*',
        'com/annimon/stream/test/hamcrest/CommonMatcher**'
]

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'jacoco'
    apply plugin: 'java'

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    jacocoTestCoverageVerification {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclusions)
            })
        }
    }
    check.dependsOn jacocoTestCoverageVerification

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)

        reports {
            xml.enabled true
            html.enabled true
            html.destination "${buildDir}/reports/jacoco"
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclusions)
            })
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        publishedProjects.each { subproject ->
            executionData subproject.tasks
        }
        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }
    }

    task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
        description = 'Generates an aggregate report from all subprojects'
        dependsOn publishedProjects.test, jacocoMerge

        additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(publishedProjects.sourceSets.main.output)
        sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
        executionData = files(publishedProjects.jacocoTestReport.executionData)

        reports {
            xml.enabled true
            html.enabled true
            html.destination "${buildDir}/reports/jacoco"
        }

        doFirst {
            executionData = files(executionData.findAll {
                it.exists()
            })
        }
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "stream/build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

test.dependsOn(rootProject.subprojects.collect { ":${it.name}:jacocoRootReport" })

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    onlyIf { System.env.'CI' }
}

sonarqube {
    properties {
        property "sonar.projectName", "Lightweight-Stream-API"
        property "sonar.projectKey", "lightweight-stream-api"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.jacoco.reportPath', "stream/build/jacoco/jacocoMerge.exec"
        property 'sonar.coverage.exclusions', jacocoExclusions
    }
}

/*allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}*/
